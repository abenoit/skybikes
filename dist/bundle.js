!function(t){var e={};function n(r){if(e[r])return e[r].exports;var i=e[r]={i:r,l:!1,exports:{}};return t[r].call(i.exports,i,i.exports,n),i.l=!0,i.exports}n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var i in t)n.d(r,i,function(e){return t[e]}.bind(null,i));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=32)}([function(t,e,n){var r=n(29);r.Template=n(28).Template,r.template=r.Template,t.exports=r},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});e.LOGIN_SUCCESS="LOGIN_SUCCESS",e.LOGOUT="LOGOUT",e.SIGN_UP="SIGN_UP",e.RENT_BIKE="RENT_BIKE",e.RETURN_BIKE="RETURN_BIKE",e.LATE_RETURN="LATE_RETURN"},function(t,e,n){"use strict";n.r(e),n.d(e,"createStore",function(){return l}),n.d(e,"combineReducers",function(){return c}),n.d(e,"bindActionCreators",function(){return b}),n.d(e,"applyMiddleware",function(){return m}),n.d(e,"compose",function(){return f}),n.d(e,"__DO_NOT_USE__ActionTypes",function(){return i});var r=n(3),i={INIT:"@@redux/INIT"+Math.random().toString(36).substring(7).split("").join("."),REPLACE:"@@redux/REPLACE"+Math.random().toString(36).substring(7).split("").join(".")},a="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},o=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(t[r]=n[r])}return t};function s(t){if("object"!==(void 0===t?"undefined":a(t))||null===t)return!1;for(var e=t;null!==Object.getPrototypeOf(e);)e=Object.getPrototypeOf(e);return Object.getPrototypeOf(t)===e}function l(t,e,n){var o;if("function"==typeof e&&void 0===n&&(n=e,e=void 0),void 0!==n){if("function"!=typeof n)throw new Error("Expected the enhancer to be a function.");return n(l)(t,e)}if("function"!=typeof t)throw new Error("Expected the reducer to be a function.");var d=t,c=e,u=[],b=u,f=!1;function m(){b===u&&(b=u.slice())}function p(){if(f)throw new Error("You may not call store.getState() while the reducer is executing. The reducer has already received the state as an argument. Pass it down from the top reducer instead of reading it from the store.");return c}function h(t){if("function"!=typeof t)throw new Error("Expected the listener to be a function.");if(f)throw new Error("You may not call store.subscribe() while the reducer is executing. If you would like to be notified after the store has been updated, subscribe from a component and invoke store.getState() in the callback to access the latest state. See https://redux.js.org/api-reference/store#subscribe(listener) for more details.");var e=!0;return m(),b.push(t),function(){if(e){if(f)throw new Error("You may not unsubscribe from a store listener while the reducer is executing. See https://redux.js.org/api-reference/store#subscribe(listener) for more details.");e=!1,m();var n=b.indexOf(t);b.splice(n,1)}}}function v(t){if(!s(t))throw new Error("Actions must be plain objects. Use custom middleware for async actions.");if(void 0===t.type)throw new Error('Actions may not have an undefined "type" property. Have you misspelled a constant?');if(f)throw new Error("Reducers may not dispatch actions.");try{f=!0,c=d(c,t)}finally{f=!1}for(var e=u=b,n=0;n<e.length;n++){(0,e[n])()}return t}return v({type:i.INIT}),(o={dispatch:v,subscribe:h,getState:p,replaceReducer:function(t){if("function"!=typeof t)throw new Error("Expected the nextReducer to be a function.");d=t,v({type:i.REPLACE})}})[r.a]=function(){var t,e=h;return(t={subscribe:function(t){if("object"!==(void 0===t?"undefined":a(t))||null===t)throw new TypeError("Expected the observer to be an object.");function n(){t.next&&t.next(p())}return n(),{unsubscribe:e(n)}}})[r.a]=function(){return this},t},o}function d(t,e){var n=e&&e.type;return"Given "+(n&&'action "'+String(n)+'"'||"an action")+', reducer "'+t+'" returned undefined. To ignore an action, you must explicitly return the previous state. If you want this reducer to hold no value, you can return null instead of undefined.'}function c(t){for(var e=Object.keys(t),n={},r=0;r<e.length;r++){var a=e[r];0,"function"==typeof t[a]&&(n[a]=t[a])}var o=Object.keys(n);var s=void 0;try{!function(t){Object.keys(t).forEach(function(e){var n=t[e];if(void 0===n(void 0,{type:i.INIT}))throw new Error('Reducer "'+e+"\" returned undefined during initialization. If the state passed to the reducer is undefined, you must explicitly return the initial state. The initial state may not be undefined. If you don't want to set a value for this reducer, you can use null instead of undefined.");if(void 0===n(void 0,{type:"@@redux/PROBE_UNKNOWN_ACTION_"+Math.random().toString(36).substring(7).split("").join(".")}))throw new Error('Reducer "'+e+"\" returned undefined when probed with a random type. Don't try to handle "+i.INIT+' or other actions in "redux/*" namespace. They are considered private. Instead, you must return the current state for any unknown actions, unless it is undefined, in which case you must return the initial state, regardless of the action type. The initial state may not be undefined, but can be null.')})}(n)}catch(t){s=t}return function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},e=arguments[1];if(s)throw s;for(var r=!1,i={},a=0;a<o.length;a++){var l=o[a],c=n[l],u=t[l],b=c(u,e);if(void 0===b){var f=d(l,e);throw new Error(f)}i[l]=b,r=r||b!==u}return r?i:t}}function u(t,e){return function(){return e(t.apply(this,arguments))}}function b(t,e){if("function"==typeof t)return u(t,e);if("object"!==(void 0===t?"undefined":a(t))||null===t)throw new Error("bindActionCreators expected an object or a function, instead received "+(null===t?"null":void 0===t?"undefined":a(t))+'. Did you write "import ActionCreators from" instead of "import * as ActionCreators from"?');for(var n=Object.keys(t),r={},i=0;i<n.length;i++){var o=n[i],s=t[o];"function"==typeof s&&(r[o]=u(s,e))}return r}function f(){for(var t=arguments.length,e=Array(t),n=0;n<t;n++)e[n]=arguments[n];return 0===e.length?function(t){return t}:1===e.length?e[0]:e.reduce(function(t,e){return function(){return t(e.apply(void 0,arguments))}})}function m(){for(var t=arguments.length,e=Array(t),n=0;n<t;n++)e[n]=arguments[n];return function(t){return function(){for(var n=arguments.length,r=Array(n),i=0;i<n;i++)r[i]=arguments[i];var a=t.apply(void 0,r),s=function(){throw new Error("Dispatching while constructing your middleware is not allowed. Other middleware would not be applied to this dispatch.")},l={getState:a.getState,dispatch:function(){return s.apply(void 0,arguments)}},d=e.map(function(t){return t(l)});return s=f.apply(void 0,d)(a.dispatch),o({},a,{dispatch:s})}}}},function(t,e,n){"use strict";(function(t,r){var i,a=n(7);i="undefined"!=typeof self?self:"undefined"!=typeof window?window:void 0!==t?t:r;var o=Object(a.a)(i);e.a=o}).call(this,n(17),n(16)(t))},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.getMemberInfo=e.isMemberABorrower=e.getAllMembers=e.members=e.INITIAL_STATE=void 0;var r=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(t[r]=n[r])}return t},i=n(2),a=n(1);var o=e.INITIAL_STATE={byId:{"amelie.benoit33@gmail.com":{email:"amelie.benoit33@gmail.com",lastname:"Benoit",firstname:"AmÃ©lie",phone:"0607080910"}},allIds:["amelie.benoit33@gmail.com"]};e.members=(0,i.combineReducers)({byId:function(){var t,e,n,i=arguments.length>0&&void 0!==arguments[0]?arguments[0]:o.byId,s=arguments[1];switch(s.type){case a.SIGN_UP:var l=s.firstname,d=s.lastname,c=s.email,u=s.phone;return r({},i,(n={email:c,lastname:d,firstname:l,phone:u},(e=c)in(t={})?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t));case a.RENT_BIKE:var b=r({},i);return b[s.email]=r({},b[s.email]),b[s.email].rentalInfo={stationId:s.stationId},b;case a.LATE_RETURN:var f=r({},i);return f[s.member].rentalInfo&&(f[s.member]=r({},f[s.member]),f[s.member].banned=!0,f[s.member].rentalInfo=null),f;case a.RETURN_BIKE:var m=r({},i);return m[s.email]=r({},m[s.email]),m[s.email].rentalInfo=null,m;default:return i}},allIds:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:o.allIds,e=arguments[1];switch(e.type){case a.SIGN_UP:return[].concat(function(t){if(Array.isArray(t)){for(var e=0,n=Array(t.length);e<t.length;e++)n[e]=t[e];return n}return Array.from(t)}(t),[e.email]);default:return t}}}),e.getAllMembers=function(t){return t.allIds.map(function(e){return t.byId[e]})},e.isMemberABorrower=function(t,e){var n=t.byId[e];return n&&n.rentalInfo},e.getMemberInfo=function(t,e){return t.byId[e]}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.getStationById=e.getAllStations=e.stations=e.INITIAL_STATE=void 0;var r=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(t[r]=n[r])}return t},i=n(2),a=n(1),o=e.INITIAL_STATE={byId:{1:{id:"1",location:"Mont-Royal",bikesAvailable:8,nbFreeSlot:2},2:{id:"2",location:"Village",bikesAvailable:6,nbFreeSlot:4},3:{id:"3",location:"Outremont",bikesAvailable:7,nbFreeSlot:3}},allIds:["1","2","3"]};e.stations=(0,i.combineReducers)({byId:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:o.byId,e=arguments[1];switch(e.type){case a.RENT_BIKE:var n=r({},t);return n[e.stationId]=r({},n[e.stationId]),n[e.stationId].bikesAvailable--,n[e.stationId].nbFreeSlot++,n;case a.RETURN_BIKE:var i=r({},t);return i[e.stationId]=r({},i[e.stationId]),i[e.stationId].bikesAvailable++,i[e.stationId].nbFreeSlot--,i;case a.LATE_RETURN:var s=r({},t),l=Object.keys(s).find(function(t){return s[t].nbFreeSlot>0});return s[l]=r({},s[l]),s[l].bikesAvailable++,s[l].nbFreeSlot--,s;default:return t}},allIds:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:o.allIds;return arguments[1].type,t}}),e.getAllStations=function(t){return t.allIds.map(function(e){return t.byId[e]})},e.getStationById=function(t,e){return t.byId[e]}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});e.MAX_TIME_RENTAL=16e3},function(t,e,n){"use strict";function r(t){var e,n=t.Symbol;return"function"==typeof n?n.observable?e=n.observable:(e=n("observable"),n.observable=e):e="@@observable",e}n.d(e,"a",function(){return r})},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.auth=e.INITIAL_STATE=void 0;var r=n(1),i=e.INITIAL_STATE={connectedMember:null};e.auth=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:i,e=arguments[1];switch(e.type){case r.LOGIN_SUCCESS:return{connectedMember:e.email};case r.LOGOUT:return{connectedMember:null};default:return t}}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.reducers=void 0;var r=n(2),i=n(8),a=n(4),o=n(5);e.reducers=(0,r.combineReducers)({auth:i.auth,members:a.members,stations:o.stations})},function(t,e){t.exports=function(t){var e="undefined"!=typeof window&&window.location;if(!e)throw new Error("fixUrls requires window.location");if(!t||"string"!=typeof t)return t;var n=e.protocol+"//"+e.host,r=n+e.pathname.replace(/\/[^\/]*$/,"/");return t.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi,function(t,e){var i,a=e.trim().replace(/^"(.*)"$/,function(t,e){return e}).replace(/^'(.*)'$/,function(t,e){return e});return/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/|\s*$)/i.test(a)?t:(i=0===a.indexOf("//")?a:0===a.indexOf("/")?n+a:r+a.replace(/^\.\//,""),"url("+JSON.stringify(i)+")")})}},function(t,e,n){var r,i,a={},o=(r=function(){return window&&document&&document.all&&!window.atob},function(){return void 0===i&&(i=r.apply(this,arguments)),i}),s=function(t){var e={};return function(t){if("function"==typeof t)return t();if(void 0===e[t]){var n=function(t){return document.querySelector(t)}.call(this,t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(t){n=null}e[t]=n}return e[t]}}(),l=null,d=0,c=[],u=n(10);function b(t,e){for(var n=0;n<t.length;n++){var r=t[n],i=a[r.id];if(i){i.refs++;for(var o=0;o<i.parts.length;o++)i.parts[o](r.parts[o]);for(;o<r.parts.length;o++)i.parts.push(y(r.parts[o],e))}else{var s=[];for(o=0;o<r.parts.length;o++)s.push(y(r.parts[o],e));a[r.id]={id:r.id,refs:1,parts:s}}}}function f(t,e){for(var n=[],r={},i=0;i<t.length;i++){var a=t[i],o=e.base?a[0]+e.base:a[0],s={css:a[1],media:a[2],sourceMap:a[3]};r[o]?r[o].parts.push(s):n.push(r[o]={id:o,parts:[s]})}return n}function m(t,e){var n=s(t.insertInto);if(!n)throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");var r=c[c.length-1];if("top"===t.insertAt)r?r.nextSibling?n.insertBefore(e,r.nextSibling):n.appendChild(e):n.insertBefore(e,n.firstChild),c.push(e);else if("bottom"===t.insertAt)n.appendChild(e);else{if("object"!=typeof t.insertAt||!t.insertAt.before)throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");var i=s(t.insertInto+" "+t.insertAt.before);n.insertBefore(e,i)}}function p(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t);var e=c.indexOf(t);e>=0&&c.splice(e,1)}function h(t){var e=document.createElement("style");return void 0===t.attrs.type&&(t.attrs.type="text/css"),v(e,t.attrs),m(t,e),e}function v(t,e){Object.keys(e).forEach(function(n){t.setAttribute(n,e[n])})}function y(t,e){var n,r,i,a;if(e.transform&&t.css){if(!(a=e.transform(t.css)))return function(){};t.css=a}if(e.singleton){var o=d++;n=l||(l=h(e)),r=_.bind(null,n,o,!1),i=_.bind(null,n,o,!0)}else t.sourceMap&&"function"==typeof URL&&"function"==typeof URL.createObjectURL&&"function"==typeof URL.revokeObjectURL&&"function"==typeof Blob&&"function"==typeof btoa?(n=function(t){var e=document.createElement("link");return void 0===t.attrs.type&&(t.attrs.type="text/css"),t.attrs.rel="stylesheet",v(e,t.attrs),m(t,e),e}(e),r=function(t,e,n){var r=n.css,i=n.sourceMap,a=void 0===e.convertToAbsoluteUrls&&i;(e.convertToAbsoluteUrls||a)&&(r=u(r));i&&(r+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(i))))+" */");var o=new Blob([r],{type:"text/css"}),s=t.href;t.href=URL.createObjectURL(o),s&&URL.revokeObjectURL(s)}.bind(null,n,e),i=function(){p(n),n.href&&URL.revokeObjectURL(n.href)}):(n=h(e),r=function(t,e){var n=e.css,r=e.media;r&&t.setAttribute("media",r);if(t.styleSheet)t.styleSheet.cssText=n;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(n))}}.bind(null,n),i=function(){p(n)});return r(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap)return;r(t=e)}else i()}}t.exports=function(t,e){if("undefined"!=typeof DEBUG&&DEBUG&&"object"!=typeof document)throw new Error("The style-loader cannot be used in a non-browser environment");(e=e||{}).attrs="object"==typeof e.attrs?e.attrs:{},e.singleton||"boolean"==typeof e.singleton||(e.singleton=o()),e.insertInto||(e.insertInto="head"),e.insertAt||(e.insertAt="bottom");var n=f(t,e);return b(n,e),function(t){for(var r=[],i=0;i<n.length;i++){var o=n[i];(s=a[o.id]).refs--,r.push(s)}t&&b(f(t,e),e);for(i=0;i<r.length;i++){var s;if(0===(s=r[i]).refs){for(var l=0;l<s.parts.length;l++)s.parts[l]();delete a[s.id]}}}};var g,w=(g=[],function(t,e){return g[t]=e,g.filter(Boolean).join("\n")});function _(t,e,n,r){var i=n?"":r.css;if(t.styleSheet)t.styleSheet.cssText=w(e,i);else{var a=document.createTextNode(i),o=t.childNodes;o[e]&&t.removeChild(o[e]),o.length?t.insertBefore(a,o[e]):t.appendChild(a)}}},function(t,e){t.exports=function(t){var e=[];return e.toString=function(){return this.map(function(e){var n=function(t,e){var n=t[1]||"",r=t[3];if(!r)return n;if(e&&"function"==typeof btoa){var i=(o=r,"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(o))))+" */"),a=r.sources.map(function(t){return"/*# sourceURL="+r.sourceRoot+t+" */"});return[n].concat(a).concat([i]).join("\n")}var o;return[n].join("\n")}(e,t);return e[2]?"@media "+e[2]+"{"+n+"}":n}).join("")},e.i=function(t,n){"string"==typeof t&&(t=[[null,t,""]]);for(var r={},i=0;i<this.length;i++){var a=this[i][0];"number"==typeof a&&(r[a]=!0)}for(i=0;i<t.length;i++){var o=t[i];"number"==typeof o[0]&&r[o[0]]||(n&&!o[2]?o[2]=n:n&&(o[2]="("+o[2]+") and ("+n+")"),e.push(o))}},e}},function(t,e,n){(t.exports=n(12)(!1)).push([t.i,".App .mdl-layout__header {\n  background-color: pink; }\n  .App .mdl-layout__header i.material-icons {\n    font-size: 3em;\n    margin: 0 20px;\n    color: lavender; }\n\n.App .rental-instructions {\n  font-size: 1.2em;\n  color: lightgray; }\n\n.App .title-logout,\n.App .rental-instructions {\n  display: flex;\n  justify-content: space-between; }\n\n.App .demo-layout-transparent .mdl-layout__header,\n.App .demo-layout-transparent .mdl-layout__drawer-button {\n  /* This background is dark, so we set text to white. Use 87% black instead if\r\n       your background is light. */\n  color: white; }\n\n.App .mdl-navigation a {\n  text-decoration: none;\n  color: white;\n  margin: 0 10px; }\n\n.App .mdl-layout__content {\n  margin: 0 100px; }\n\n.App .Admin .mdl-data-table tbody tr:nth-child(odd) {\n  background-color: #eaeaea; }\n\n.App .stations-cards {\n  display: flex; }\n  .App .stations-cards .mdl-card {\n    margin: 20px 10px; }\n\n.App .mdl-data-table {\n  margin: 0 auto; }\n\n.App .timer-countdown {\n  color: deeppink;\n  font-size: 1.5em; }\n",""])},function(t,e,n){var r=n(13);"string"==typeof r&&(r=[[t.i,r,""]]);var i={hmr:!0,transform:void 0,insertInto:void 0};n(11)(r,i);r.locals&&(t.exports=r.locals)},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});e.bindOnclick=function(t,e){var n=document.querySelector(t);n&&n.addEventListener("click",function(t){t.preventDefault(),e(t)})},e.bindOnclickForClass=function(t,e){var n=document.querySelectorAll(t);n&&n.forEach(function(t){t.addEventListener("click",function(t){t.preventDefault(),e(t)})})},e.bindOnSubmit=function(t,e){var n=document.querySelector(t);n&&n.addEventListener("submit",function(t){t.preventDefault(),e()})}},function(t,e){t.exports=function(t){if(!t.webpackPolyfill){var e=Object.create(t);e.children||(e.children=[]),Object.defineProperty(e,"loaded",{enumerable:!0,get:function(){return e.l}}),Object.defineProperty(e,"id",{enumerable:!0,get:function(){return e.i}}),Object.defineProperty(e,"exports",{enumerable:!0}),e.webpackPolyfill=1}return e}},function(t,e){var n;n=function(){return this}();try{n=n||Function("return this")()||(0,eval)("this")}catch(t){"object"==typeof window&&(n=window)}t.exports=n},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}();var i=function(){function t(e){if(function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.station=e,!this.station)throw new Error("station is required")}return r(t,[{key:"checkStationForReturningBike",value:function(){if(0===this.station.nbFreeSlot)throw new Error("No free slot here !")}},{key:"checkStationForRentingBike",value:function(){if(0===this.station.bikesAvailable)throw new Error("No bicycle available here !")}}]),t}();e.default=i},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}();n(6);var i=function(){function t(e){if(function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.email=e,!this.email)throw new Error("Email is required")}return r(t,[{key:"checkCustomerInformation",value:function(t,e,n,r){var i=this;if(!t||!e||!n)throw new Error("All fields are required.");if(r.find(function(t){return t.email.toLowerCase().trim()===i.email.toLowerCase().trim()}))throw new Error("An account with this email already exists.")}},{key:"checkLogin",value:function(t){var e=this;if(!t.find(function(t){return t.email===e.email}))throw new Error("member not found")}}]),t}();e.default=i},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.signup=e.logout=e.login=void 0;var r=n(1);e.login=function(t){return{type:r.LOGIN_SUCCESS,email:t}},e.logout=function(){return{type:r.LOGOUT}},e.signup=function(t,e,n,i){return{type:r.SIGN_UP,firstname:t,lastname:e,email:n,phone:i}}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.lateReturn=e.returnBike=e.rentBike=void 0;var r=n(1);e.rentBike=function(t,e){return{type:r.RENT_BIKE,stationId:t,email:e}},e.returnBike=function(t,e){return{type:r.RETURN_BIKE,stationId:t,email:e}},e.lateReturn=function(t){return{type:r.LATE_RETURN,member:t}}},function(t,e,n){var r=n(0);t.exports=new r.Template({code:function(t,e,n){var r=this;return r.b(n=n||""),r.b('<div class="Banned">\r'),r.b("\n"+n),r.b("    <h3>Sorry "),r.b(r.v(r.f("email",t,e,0))),r.b(", you are banned !</h3>\r"),r.b("\n"+n),r.b("\r"),r.b("\n"+n),r.b('    <div class="mdl-cell mdl-cell--2-col mdl-textfield mdl-js-textfield">\r'),r.b("\n"+n),r.b('        <button type="button" id="logout" class="mdl-button mdl-js-button mdl-button--raised mdl-js-ripple-effect">Logout</button>\r'),r.b("\n"+n),r.b("    </div>\r"),r.b("\n"+n),r.b("</div>"),r.fl()},partials:{},subs:{}},'<div class="Banned">\r\n    <h3>Sorry {{email}}, you are banned !</h3>\r\n\r\n    <div class="mdl-cell mdl-cell--2-col mdl-textfield mdl-js-textfield">\r\n        <button type="button" id="logout" class="mdl-button mdl-js-button mdl-button--raised mdl-js-ripple-effect">Logout</button>\r\n    </div>\r\n</div>',r)},function(t,e,n){var r=n(0);t.exports=new r.Template({code:function(t,e,n){var r=this;return r.b(n=n||""),r.b('<div class="Rented">\r'),r.b("\n"+n),r.b('  <div class="title-logout">\r'),r.b("\n"+n),r.b("    <h3>Thank you "),r.b(r.v(r.f("email",t,e,0))),r.b(" !</h3>\r"),r.b("\n"+n),r.b("\r"),r.b("\n"+n),r.b('    <div class="mdl-cell mdl-cell--2-col mdl-textfield mdl-js-textfield">\r'),r.b("\n"+n),r.b('        <button type="button" id="logout" class="mdl-button mdl-js-button mdl-button--raised mdl-js-ripple-effect">Logout</button>\r'),r.b("\n"+n),r.b("    </div>\r"),r.b("\n"+n),r.b("  </div>\r"),r.b("\n"+n),r.b("\r"),r.b("\n"+n),r.b('  <div class="rental-instructions">\r'),r.b("\n"+n),r.b("    <span>Please chose where to return your bike</span> \r"),r.b("\n"+n),r.b('    <div id="timer-countdown" class="timer-countdown">'),r.b(r.v(r.f("remainingTime",t,e,0))),r.b(" ms remaining to return the bike</div>\r"),r.b("\n"+n),r.b("  </div>\r"),r.b("\n"+n),r.b("\r"),r.b("\n"+n),r.b("\r"),r.b("\n"+n),r.b('  <div class="stations-cards">\r'),r.b("\n"+n),r.s(r.f("stations",t,e,1),t,e,0,588,1102,"{{ }}")&&(r.rs(t,e,function(t,e,r){r.b('  <div class="demo-card-square mdl-card mdl-shadow--2dp">\r'),r.b("\n"+n),r.b('    <div class="mdl-card__title mdl-card--expand">\r'),r.b("\n"+n),r.b('      <h2 class="mdl-card__title-text">'),r.b(r.v(r.f("location",t,e,0))),r.b("</h2>\r"),r.b("\n"+n),r.b("    </div>\r"),r.b("\n"+n),r.b('    <div class="mdl-card__supporting-text">\r'),r.b("\n"+n),r.b("      <span>Slots free : "),r.b(r.v(r.f("nbFreeSlot",t,e,0))),r.b("</span>\r"),r.b("\n"+n),r.b("    </div>\r"),r.b("\n"+n),r.b('    <div class="mdl-card__actions mdl-card--border">\r'),r.b("\n"+n),r.b("      <a data-id="),r.b(r.v(r.f("id",t,e,0))),r.b(' class="return mdl-button mdl-button--colored mdl-js-button mdl-js-ripple-effect">\r'),r.b("\n"+n),r.b("        Return my bike here\r"),r.b("\n"+n),r.b("      </a>\r"),r.b("\n"+n),r.b("    </div>\r"),r.b("\n"+n),r.b("  </div>\r"),r.b("\n"+n)}),t.pop()),r.b("  </div>\r"),r.b("\n"+n),r.b("</div>"),r.fl()},partials:{},subs:{}},'<div class="Rented">\r\n  <div class="title-logout">\r\n    <h3>Thank you {{email}} !</h3>\r\n\r\n    <div class="mdl-cell mdl-cell--2-col mdl-textfield mdl-js-textfield">\r\n        <button type="button" id="logout" class="mdl-button mdl-js-button mdl-button--raised mdl-js-ripple-effect">Logout</button>\r\n    </div>\r\n  </div>\r\n\r\n  <div class="rental-instructions">\r\n    <span>Please chose where to return your bike</span> \r\n    <div id="timer-countdown" class="timer-countdown">{{remainingTime}} ms remaining to return the bike</div>\r\n  </div>\r\n\r\n\r\n  <div class="stations-cards">\r\n  {{#stations}}\r\n  <div class="demo-card-square mdl-card mdl-shadow--2dp">\r\n    <div class="mdl-card__title mdl-card--expand">\r\n      <h2 class="mdl-card__title-text">{{location}}</h2>\r\n    </div>\r\n    <div class="mdl-card__supporting-text">\r\n      <span>Slots free : {{nbFreeSlot}}</span>\r\n    </div>\r\n    <div class="mdl-card__actions mdl-card--border">\r\n      <a data-id={{id}} class="return mdl-button mdl-button--colored mdl-js-button mdl-js-ripple-effect">\r\n        Return my bike here\r\n      </a>\r\n    </div>\r\n  </div>\r\n  {{/stations}}\r\n  </div>\r\n</div>',r)},function(t,e,n){var r=n(0);t.exports=new r.Template({code:function(t,e,n){var r=this;return r.b(n=n||""),r.b('<div class="Rental">\r'),r.b("\n"+n),r.b('  <div class="title-logout">\r'),r.b("\n"+n),r.b("    <h3>Hello "),r.b(r.v(r.f("email",t,e,0))),r.b("</h3>\r"),r.b("\n"+n),r.b("\r"),r.b("\n"+n),r.b('    <div class="mdl-cell mdl-cell--2-col mdl-textfield mdl-js-textfield">\r'),r.b("\n"+n),r.b('        <button type="button" id="logout" class="mdl-button mdl-js-button mdl-button--raised mdl-js-ripple-effect">Logout</button>\r'),r.b("\n"+n),r.b("    </div>\r"),r.b("\n"+n),r.b("  </div>\r"),r.b("\n"+n),r.b("\r"),r.b("\n"+n),r.b('  <div class="rental-instructions">\r'),r.b("\n"+n),r.b("    <span>Select the station where you want to rent your bike !</span>\r"),r.b("\n"+n),r.b("  </div>\r"),r.b("\n"+n),r.b("\r"),r.b("\n"+n),r.b('  <div class="stations-cards">\r'),r.b("\n"+n),r.s(r.f("stations",t,e,1),t,e,0,483,995,"{{ }}")&&(r.rs(t,e,function(t,e,r){r.b('  <div class="demo-card-square mdl-card mdl-shadow--2dp">\r'),r.b("\n"+n),r.b('    <div class="mdl-card__title mdl-card--expand">\r'),r.b("\n"+n),r.b('      <h2 class="mdl-card__title-text">'),r.b(r.v(r.f("location",t,e,0))),r.b("</h2>\r"),r.b("\n"+n),r.b("    </div>\r"),r.b("\n"+n),r.b('    <div class="mdl-card__supporting-text">\r'),r.b("\n"+n),r.b("      <span>Bikes Availables : "),r.b(r.v(r.f("bikesAvailable",t,e,0))),r.b("</span>\r"),r.b("\n"+n),r.b("    </div>\r"),r.b("\n"+n),r.b('    <div class="mdl-card__actions mdl-card--border">\r'),r.b("\n"+n),r.b("      <a data-id="),r.b(r.v(r.f("id",t,e,0))),r.b(' class="rent mdl-button mdl-button--colored mdl-js-button mdl-js-ripple-effect">\r'),r.b("\n"+n),r.b("        Rent here\r"),r.b("\n"+n),r.b("      </a>\r"),r.b("\n"+n),r.b("    </div>\r"),r.b("\n"+n),r.b("  </div>\r"),r.b("\n"+n)}),t.pop()),r.b("  </div>\r"),r.b("\n"+n),r.b("</div>"),r.fl()},partials:{},subs:{}},'<div class="Rental">\r\n  <div class="title-logout">\r\n    <h3>Hello {{email}}</h3>\r\n\r\n    <div class="mdl-cell mdl-cell--2-col mdl-textfield mdl-js-textfield">\r\n        <button type="button" id="logout" class="mdl-button mdl-js-button mdl-button--raised mdl-js-ripple-effect">Logout</button>\r\n    </div>\r\n  </div>\r\n\r\n  <div class="rental-instructions">\r\n    <span>Select the station where you want to rent your bike !</span>\r\n  </div>\r\n\r\n  <div class="stations-cards">\r\n  {{#stations}}\r\n  <div class="demo-card-square mdl-card mdl-shadow--2dp">\r\n    <div class="mdl-card__title mdl-card--expand">\r\n      <h2 class="mdl-card__title-text">{{location}}</h2>\r\n    </div>\r\n    <div class="mdl-card__supporting-text">\r\n      <span>Bikes Availables : {{bikesAvailable}}</span>\r\n    </div>\r\n    <div class="mdl-card__actions mdl-card--border">\r\n      <a data-id={{id}} class="rent mdl-button mdl-button--colored mdl-js-button mdl-js-ripple-effect">\r\n        Rent here\r\n      </a>\r\n    </div>\r\n  </div>\r\n  {{/stations}}\r\n  </div>\r\n</div>',r)},function(t,e,n){var r=n(0);t.exports=new r.Template({code:function(t,e,n){var r=this;return r.b(n=n||""),r.b('<div class="Admin">\r'),r.b("\n"+n),r.b("  <h4>Stations status</h4>\r"),r.b("\n"+n),r.b('  <div class="stations-cards">\r'),r.b("\n"+n),r.s(r.f("stations",t,e,1),t,e,0,96,511,"{{ }}")&&(r.rs(t,e,function(t,e,r){r.b('  <div class="demo-card-square mdl-card mdl-shadow--2dp">\r'),r.b("\n"+n),r.b('    <div class="mdl-card__title mdl-card--expand">\r'),r.b("\n"+n),r.b('      <h2 class="mdl-card__title-text">'),r.b(r.v(r.f("location",t,e,0))),r.b("</h2>\r"),r.b("\n"+n),r.b("    </div>\r"),r.b("\n"+n),r.b('    <div class="mdl-card__supporting-text">\r'),r.b("\n"+n),r.b("      <span>Bikes Availables : "),r.b(r.v(r.f("bikesAvailable",t,e,0))),r.b("</span>\r"),r.b("\n"+n),r.b("    </div>\r"),r.b("\n"+n),r.b('    <div class="mdl-card__supporting-text">\r'),r.b("\n"+n),r.b("      <span>Free Slots : "),r.b(r.v(r.f("nbFreeSlot",t,e,0))),r.b("</span>\r"),r.b("\n"+n),r.b("    </div>\r"),r.b("\n"+n),r.b("  </div>\r"),r.b("\n"+n)}),t.pop()),r.b("  </div>\r"),r.b("\n"+n),r.b("\r"),r.b("\n"+n),r.b("  <h4>Members information</h4>\r"),r.b("\n"+n),r.b('  <table class="mdl-data-table mdl-js-data-table mdl-shadow--2dp">\r'),r.b("\n"+n),r.b("    <thead>\r"),r.b("\n"+n),r.b("      <tr>\r"),r.b("\n"+n),r.b("        <th>Email</th>\r"),r.b("\n"+n),r.b("        <th>Name</th>\r"),r.b("\n"+n),r.b("        <th>Phone</th>\r"),r.b("\n"+n),r.b("        <th>Is banned</th>\r"),r.b("\n"+n),r.b("        <th>Is currently renting a bike</th>\r"),r.b("\n"+n),r.b("      </tr>\r"),r.b("\n"+n),r.b("    </thead>\r"),r.b("\n"+n),r.b("    <tbody>\r"),r.b("\n"+n),r.s(r.f("members",t,e,1),t,e,0,866,1354,"{{ }}")&&(r.rs(t,e,function(t,e,r){r.b("          <tr>\r"),r.b("\n"+n),r.b("          <td>"),r.b(r.v(r.f("email",t,e,0))),r.b("</td>\r"),r.b("\n"+n),r.b("          <td>"),r.b(r.v(r.f("firstname",t,e,0))),r.b(" "),r.b(r.v(r.f("lastname",t,e,0))),r.b("</td>\r"),r.b("\n"+n),r.b("          <td>"),r.b(r.v(r.f("phone",t,e,0))),r.b("</td>\r"),r.b("\n"+n),r.b("          <td>"),r.s(r.f("banned",t,e,1),t,e,0,1016,1051,"{{ }}")&&(r.rs(t,e,function(t,e,r){r.b("\r"),r.b("\n"+n),r.b("              Yes\r"),r.b("\n"+n)}),t.pop()),r.s(r.f("banned",t,e,1),t,e,1,0,0,"")||(r.b("              No\r"),r.b("\n"+n)),r.b("          </td>\r"),r.b("\n"+n),r.b("          <td>"),r.s(r.f("rentalInfo",t,e,1),t,e,0,1182,1217,"{{ }}")&&(r.rs(t,e,function(t,e,r){r.b("\r"),r.b("\n"+n),r.b("              Yes\r"),r.b("\n"+n)}),t.pop()),r.s(r.f("rentalInfo",t,e,1),t,e,1,0,0,"")||(r.b("              No\r"),r.b("\n"+n)),r.b("          </td>\r"),r.b("\n"+n),r.b("          </tr>\r"),r.b("\n"+n)}),t.pop()),r.b("    </tbody>\r"),r.b("\n"+n),r.b("  </table>\r"),r.b("\n"+n),r.b("</div>"),r.fl()},partials:{},subs:{}},'<div class="Admin">\r\n  <h4>Stations status</h4>\r\n  <div class="stations-cards">\r\n  {{#stations}}\r\n  <div class="demo-card-square mdl-card mdl-shadow--2dp">\r\n    <div class="mdl-card__title mdl-card--expand">\r\n      <h2 class="mdl-card__title-text">{{location}}</h2>\r\n    </div>\r\n    <div class="mdl-card__supporting-text">\r\n      <span>Bikes Availables : {{bikesAvailable}}</span>\r\n    </div>\r\n    <div class="mdl-card__supporting-text">\r\n      <span>Free Slots : {{nbFreeSlot}}</span>\r\n    </div>\r\n  </div>\r\n  {{/stations}}\r\n  </div>\r\n\r\n  <h4>Members information</h4>\r\n  <table class="mdl-data-table mdl-js-data-table mdl-shadow--2dp">\r\n    <thead>\r\n      <tr>\r\n        <th>Email</th>\r\n        <th>Name</th>\r\n        <th>Phone</th>\r\n        <th>Is banned</th>\r\n        <th>Is currently renting a bike</th>\r\n      </tr>\r\n    </thead>\r\n    <tbody>\r\n      {{#members}}\r\n          <tr>\r\n          <td>{{email}}</td>\r\n          <td>{{firstname}} {{lastname}}</td>\r\n          <td>{{phone}}</td>\r\n          <td>{{#banned}}\r\n              Yes\r\n              {{/banned}}\r\n              {{^banned}}\r\n              No\r\n              {{/banned}}\r\n          </td>\r\n          <td>{{#rentalInfo}}\r\n              Yes\r\n              {{/rentalInfo}}\r\n              {{^rentalInfo}}\r\n              No\r\n              {{/rentalInfo}}\r\n          </td>\r\n          </tr>\r\n      {{/members}}\r\n    </tbody>\r\n  </table>\r\n</div>',r)},function(t,e,n){var r=n(0);t.exports=new r.Template({code:function(t,e,n){var r=this;return r.b(n=n||""),r.b('<div class="Login">\r'),r.b("\n"+n),r.b("      <h3>Hello, who are you ?</h3>\r"),r.b("\n"+n),r.b("\r"),r.b("\n"+n),r.b('      <form id="memberLoginForm">\r'),r.b("\n"+n),r.b('            <div class="mdl-grid">\r'),r.b("\n"+n),r.b('                  <div class="mdl-cell mdl-cell--4-col mdl-textfield mdl-js-textfield">\r'),r.b("\n"+n),r.b('                        <input class="mdl-textfield__input" type="email" id="email" required>\r'),r.b("\n"+n),r.b('                        <label class="mdl-textfield__label" for="email">Email</label>\r'),r.b("\n"+n),r.b("                  </div>\r"),r.b("\n"+n),r.b("\r"),r.b("\n"+n),r.b('                  <div class="mdl-cell mdl-cell--2-col mdl-textfield mdl-js-textfield">\r'),r.b("\n"+n),r.b('                        <button type="button" id="memberLoginBtn" class="mdl-button mdl-js-button mdl-button--raised mdl-js-ripple-effect">Login</button>\r'),r.b("\n"+n),r.b("                  </div>\r"),r.b("\n"+n),r.b("            </div>\r"),r.b("\n"+n),r.b("      </form>\r"),r.b("\n"+n),r.b("</div>"),r.fl()},partials:{},subs:{}},'<div class="Login">\r\n      <h3>Hello, who are you ?</h3>\r\n\r\n      <form id="memberLoginForm">\r\n            <div class="mdl-grid">\r\n                  <div class="mdl-cell mdl-cell--4-col mdl-textfield mdl-js-textfield">\r\n                        <input class="mdl-textfield__input" type="email" id="email" required>\r\n                        <label class="mdl-textfield__label" for="email">Email</label>\r\n                  </div>\r\n\r\n                  <div class="mdl-cell mdl-cell--2-col mdl-textfield mdl-js-textfield">\r\n                        <button type="button" id="memberLoginBtn" class="mdl-button mdl-js-button mdl-button--raised mdl-js-ripple-effect">Login</button>\r\n                  </div>\r\n            </div>\r\n      </form>\r\n</div>',r)},function(t,e,n){var r=n(0);t.exports=new r.Template({code:function(t,e,n){var r=this;return r.b(n=n||""),r.b("<h3>Welcome !</h3>\r"),r.b("\n"+n),r.b("<div>Please register to access the platform</div>\r"),r.b("\n"+n),r.b("\r"),r.b("\n"+n),r.b('<form id="registrationForm">\r'),r.b("\n"+n),r.b('      <div class="mdl-grid">\r'),r.b("\n"+n),r.b('            <div class="mdl-cell mdl-cell--4-col mdl-textfield mdl-js-textfield">\r'),r.b("\n"+n),r.b('                  <input class="mdl-textfield__input" type="text" id="fname" placeholder="First name" required >\r'),r.b("\n"+n),r.b("            </div>\r"),r.b("\n"+n),r.b("\r"),r.b("\n"+n),r.b('            <div class="mdl-cell mdl-cell--4-col mdl-cell--2-offset mdl-textfield mdl-js-textfield">\r'),r.b("\n"+n),r.b('                  <input class="mdl-textfield__input" type="text" id="lname" placeholder="Last name" required>\r'),r.b("\n"+n),r.b("            </div>\r"),r.b("\n"+n),r.b("      </div>\r"),r.b("\n"+n),r.b("\r"),r.b("\n"+n),r.b('      <div class="mdl-grid">\r'),r.b("\n"+n),r.b('            <div class="mdl-cell mdl-cell--4-col mdl-textfield mdl-js-textfield">\r'),r.b("\n"+n),r.b('                  <input class="mdl-textfield__input" type="email" id="email" placeholder="Email" required>\r'),r.b("\n"+n),r.b("            </div>\r"),r.b("\n"+n),r.b("      </div>\r"),r.b("\n"+n),r.b("\r"),r.b("\n"+n),r.b('      <div class="mdl-grid">\r'),r.b("\n"+n),r.b('            <div class="mdl-cell mdl-cell--4-col mdl-textfield mdl-js-textfield">\r'),r.b("\n"+n),r.b('                  <input class="mdl-textfield__input" type="phone" id="phone" placeholder="Emergency phone number" required>\r'),r.b("\n"+n),r.b("            </div>\r"),r.b("\n"+n),r.b("      </div>\r"),r.b("\n"+n),r.b('      <button type="submit" id="registrationBtn" class="mdl-button mdl-js-button mdl-button--raised mdl-js-ripple-effect">Register me !</button>\r'),r.b("\n"+n),r.b("</form>"),r.fl()},partials:{},subs:{}},'<h3>Welcome !</h3>\r\n<div>Please register to access the platform</div>\r\n\r\n<form id="registrationForm">\r\n      <div class="mdl-grid">\r\n            <div class="mdl-cell mdl-cell--4-col mdl-textfield mdl-js-textfield">\r\n                  <input class="mdl-textfield__input" type="text" id="fname" placeholder="First name" required >\r\n            </div>\r\n\r\n            <div class="mdl-cell mdl-cell--4-col mdl-cell--2-offset mdl-textfield mdl-js-textfield">\r\n                  <input class="mdl-textfield__input" type="text" id="lname" placeholder="Last name" required>\r\n            </div>\r\n      </div>\r\n\r\n      <div class="mdl-grid">\r\n            <div class="mdl-cell mdl-cell--4-col mdl-textfield mdl-js-textfield">\r\n                  <input class="mdl-textfield__input" type="email" id="email" placeholder="Email" required>\r\n            </div>\r\n      </div>\r\n\r\n      <div class="mdl-grid">\r\n            <div class="mdl-cell mdl-cell--4-col mdl-textfield mdl-js-textfield">\r\n                  <input class="mdl-textfield__input" type="phone" id="phone" placeholder="Emergency phone number" required>\r\n            </div>\r\n      </div>\r\n      <button type="submit" id="registrationBtn" class="mdl-button mdl-js-button mdl-button--raised mdl-js-ripple-effect">Register me !</button>\r\n</form>',r)},function(t,e,n){!function(t){function e(t,e,n){var r;return e&&"object"==typeof e&&(void 0!==e[t]?r=e[t]:n&&e.get&&"function"==typeof e.get&&(r=e.get(t))),r}t.Template=function(t,e,n,r){t=t||{},this.r=t.code||this.r,this.c=n,this.options=r||{},this.text=e||"",this.partials=t.partials||{},this.subs=t.subs||{},this.buf=""},t.Template.prototype={r:function(t,e,n){return""},v:function(t){return t=l(t),s.test(t)?t.replace(n,"&amp;").replace(r,"&lt;").replace(i,"&gt;").replace(a,"&#39;").replace(o,"&quot;"):t},t:l,render:function(t,e,n){return this.ri([t],e||{},n)},ri:function(t,e,n){return this.r(t,e,n)},ep:function(t,e){var n=this.partials[t],r=e[n.name];if(n.instance&&n.base==r)return n.instance;if("string"==typeof r){if(!this.c)throw new Error("No compiler available.");r=this.c.compile(r,this.options)}if(!r)return null;if(this.partials[t].base=r,n.subs){for(key in e.stackText||(e.stackText={}),n.subs)e.stackText[key]||(e.stackText[key]=void 0!==this.activeSub&&e.stackText[this.activeSub]?e.stackText[this.activeSub]:this.text);r=function(t,e,n,r,i,a){function o(){}function s(){}var l;o.prototype=t,s.prototype=t.subs;var d=new o;for(l in d.subs=new s,d.subsText={},d.buf="",r=r||{},d.stackSubs=r,d.subsText=a,e)r[l]||(r[l]=e[l]);for(l in r)d.subs[l]=r[l];for(l in i=i||{},d.stackPartials=i,n)i[l]||(i[l]=n[l]);for(l in i)d.partials[l]=i[l];return d}(r,n.subs,n.partials,this.stackSubs,this.stackPartials,e.stackText)}return this.partials[t].instance=r,r},rp:function(t,e,n,r){var i=this.ep(t,n);return i?i.ri(e,n,r):""},rs:function(t,e,n){var r=t[t.length-1];if(d(r))for(var i=0;i<r.length;i++)t.push(r[i]),n(t,e,this),t.pop();else n(t,e,this)},s:function(t,e,n,r,i,a,o){var s;return(!d(t)||0!==t.length)&&("function"==typeof t&&(t=this.ms(t,e,n,r,i,a,o)),s=!!t,!r&&s&&e&&e.push("object"==typeof t?t:e[e.length-1]),s)},d:function(t,n,r,i){var a,o=t.split("."),s=this.f(o[0],n,r,i),l=this.options.modelGet,c=null;if("."===t&&d(n[n.length-2]))s=n[n.length-1];else for(var u=1;u<o.length;u++)void 0!==(a=e(o[u],s,l))?(c=s,s=a):s="";return!(i&&!s)&&(i||"function"!=typeof s||(n.push(c),s=this.mv(s,n,r),n.pop()),s)},f:function(t,n,r,i){for(var a=!1,o=!1,s=this.options.modelGet,l=n.length-1;l>=0;l--)if(void 0!==(a=e(t,n[l],s))){o=!0;break}return o?(i||"function"!=typeof a||(a=this.mv(a,n,r)),a):!i&&""},ls:function(t,e,n,r,i){var a=this.options.delimiters;return this.options.delimiters=i,this.b(this.ct(l(t.call(e,r)),e,n)),this.options.delimiters=a,!1},ct:function(t,e,n){if(this.options.disableLambda)throw new Error("Lambda features disabled.");return this.c.compile(t,this.options).render(e,n)},b:function(t){this.buf+=t},fl:function(){var t=this.buf;return this.buf="",t},ms:function(t,e,n,r,i,a,o){var s,l=e[e.length-1],d=t.call(l);return"function"==typeof d?!!r||(s=this.activeSub&&this.subsText&&this.subsText[this.activeSub]?this.subsText[this.activeSub]:this.text,this.ls(d,l,n,s.substring(i,a),o)):d},mv:function(t,e,n){var r=e[e.length-1],i=t.call(r);return"function"==typeof i?this.ct(l(i.call(r)),r,n):i},sub:function(t,e,n,r){var i=this.subs[t];i&&(this.activeSub=t,i(e,n,this,r),this.activeSub=!1)}};var n=/&/g,r=/</g,i=/>/g,a=/\'/g,o=/\"/g,s=/[&<>\"\']/;function l(t){return String(null===t||void 0===t?"":t)}var d=Array.isArray||function(t){return"[object Array]"===Object.prototype.toString.call(t)}}(e)},function(t,e,n){!function(t){var e=/\S/,n=/\"/g,r=/\n/g,i=/\r/g,a=/\\/g,o=/\u2028/,s=/\u2029/;function l(t){"}"===t.n.substr(t.n.length-1)&&(t.n=t.n.substring(0,t.n.length-1))}function d(t){return t.trim?t.trim():t.replace(/^\s*|\s*$/g,"")}function c(t,e,n){if(e.charAt(n)!=t.charAt(0))return!1;for(var r=1,i=t.length;r<i;r++)if(e.charAt(n+r)!=t.charAt(r))return!1;return!0}t.tags={"#":1,"^":2,"<":3,$:4,"/":5,"!":6,">":7,"=":8,_v:9,"{":10,"&":11,_t:12},t.scan=function(n,r){var i=n.length,a=0,o=null,s=null,u="",b=[],f=!1,m=0,p=0,h="{{",v="}}";function y(){u.length>0&&(b.push({tag:"_t",text:new String(u)}),u="")}function g(n,r){if(y(),n&&function(){for(var n=!0,r=p;r<b.length;r++)if(!(n=t.tags[b[r].tag]<t.tags._v||"_t"==b[r].tag&&null===b[r].text.match(e)))return!1;return n}())for(var i,a=p;a<b.length;a++)b[a].text&&((i=b[a+1])&&">"==i.tag&&(i.indent=b[a].text.toString()),b.splice(a,1));else r||b.push({tag:"\n"});f=!1,p=b.length}function w(t,e){var n="="+v,r=t.indexOf(n,e),i=d(t.substring(t.indexOf("=",e)+1,r)).split(" ");return h=i[0],v=i[i.length-1],r+n.length-1}for(r&&(r=r.split(" "),h=r[0],v=r[1]),m=0;m<i;m++)0==a?c(h,n,m)?(--m,y(),a=1):"\n"==n.charAt(m)?g(f):u+=n.charAt(m):1==a?(m+=h.length-1,"="==(o=(s=t.tags[n.charAt(m+1)])?n.charAt(m+1):"_v")?(m=w(n,m),a=0):(s&&m++,a=2),f=m):c(v,n,m)?(b.push({tag:o,n:d(u),otag:h,ctag:v,i:"/"==o?f-h.length:m+v.length}),u="",m+=v.length-1,a=0,"{"==o&&("}}"==v?m++:l(b[b.length-1]))):u+=n.charAt(m);return g(f,!0),b};var u={_t:!0,"\n":!0,$:!0,"/":!0};function b(t,e){for(var n=0,r=e.length;n<r;n++)if(e[n].o==t.n)return t.tag="#",!0}function f(t,e,n){for(var r=0,i=n.length;r<i;r++)if(n[r].c==t&&n[r].o==e)return!0}function m(t){var e=[];for(var n in t.partials)e.push('"'+h(n)+'":{name:"'+h(t.partials[n].name)+'", '+m(t.partials[n])+"}");return"partials: {"+e.join(",")+"}, subs: "+function(t){var e=[];for(var n in t)e.push('"'+h(n)+'": function(c,p,t,i) {'+t[n]+"}");return"{ "+e.join(",")+" }"}(t.subs)}t.stringify=function(e,n,r){return"{code: function (c,p,i) { "+t.wrapMain(e.code)+" },"+m(e)+"}"};var p=0;function h(t){return t.replace(a,"\\\\").replace(n,'\\"').replace(r,"\\n").replace(i,"\\r").replace(o,"\\u2028").replace(s,"\\u2029")}function v(t){return~t.indexOf(".")?"d":"f"}function y(t,e){var n="<"+(e.prefix||"")+t.n+p++;return e.partials[n]={name:t.n,partials:{}},e.code+='t.b(t.rp("'+h(n)+'",c,p,"'+(t.indent||"")+'"));',n}function g(t,e){e.code+="t.b(t.t(t."+v(t.n)+'("'+h(t.n)+'",c,p,0)));'}function w(t){return"t.b("+t+");"}t.generate=function(e,n,r){p=0;var i={code:"",subs:{},partials:{}};return t.walk(e,i),r.asString?this.stringify(i,n,r):this.makeTemplate(i,n,r)},t.wrapMain=function(t){return'var t=this;t.b(i=i||"");'+t+"return t.fl();"},t.template=t.Template,t.makeTemplate=function(t,e,n){var r=this.makePartials(t);return r.code=new Function("c","p","i",this.wrapMain(t.code)),new this.template(r,e,this,n)},t.makePartials=function(t){var e,n={subs:{},partials:t.partials,name:t.name};for(e in n.partials)n.partials[e]=this.makePartials(n.partials[e]);for(e in t.subs)n.subs[e]=new Function("c","p","t","i",t.subs[e]);return n},t.codegen={"#":function(e,n){n.code+="if(t.s(t."+v(e.n)+'("'+h(e.n)+'",c,p,1),c,p,0,'+e.i+","+e.end+',"'+e.otag+" "+e.ctag+'")){t.rs(c,p,function(c,p,t){',t.walk(e.nodes,n),n.code+="});c.pop();}"},"^":function(e,n){n.code+="if(!t.s(t."+v(e.n)+'("'+h(e.n)+'",c,p,1),c,p,1,0,0,"")){',t.walk(e.nodes,n),n.code+="};"},">":y,"<":function(e,n){var r={partials:{},code:"",subs:{},inPartial:!0};t.walk(e.nodes,r);var i=n.partials[y(e,n)];i.subs=r.subs,i.partials=r.partials},$:function(e,n){var r={subs:{},code:"",partials:n.partials,prefix:e.n};t.walk(e.nodes,r),n.subs[e.n]=r.code,n.inPartial||(n.code+='t.sub("'+h(e.n)+'",c,p,i);')},"\n":function(t,e){e.code+=w('"\\n"'+(t.last?"":" + i"))},_v:function(t,e){e.code+="t.b(t.v(t."+v(t.n)+'("'+h(t.n)+'",c,p,0)));'},_t:function(t,e){e.code+=w('"'+h(t.text)+'"')},"{":g,"&":g},t.walk=function(e,n){for(var r,i=0,a=e.length;i<a;i++)(r=t.codegen[e[i].tag])&&r(e[i],n);return n},t.parse=function(e,n,r){return function e(n,r,i,a){var o,s=[],l=null,d=null;for(o=i[i.length-1];n.length>0;){if(d=n.shift(),o&&"<"==o.tag&&!(d.tag in u))throw new Error("Illegal content in < super tag.");if(t.tags[d.tag]<=t.tags.$||b(d,a))i.push(d),d.nodes=e(n,d.tag,i,a);else{if("/"==d.tag){if(0===i.length)throw new Error("Closing tag without opener: /"+d.n);if(l=i.pop(),d.n!=l.n&&!f(d.n,l.n,a))throw new Error("Nesting error: "+l.n+" vs. "+d.n);return l.end=d.i,s}"\n"==d.tag&&(d.last=0==n.length||"\n"==n[0].tag)}s.push(d)}if(i.length>0)throw new Error("missing closing tag: "+i.pop().n);return s}(e,0,[],(r=r||{}).sectionTags||[])},t.cache={},t.cacheKey=function(t,e){return[t,!!e.asString,!!e.disableLambda,e.delimiters,!!e.modelGet].join("||")},t.compile=function(e,n){n=n||{};var r=t.cacheKey(e,n),i=this.cache[r];if(i){var a=i.partials;for(var o in a)delete a[o].instance;return i}return i=this.generate(this.parse(this.scan(e,n.delimiters),e,n),e,n),this.cache[r]=i}}(e)},function(t,e,n){var r=n(0);t.exports=new r.Template({code:function(t,e,n){var r=this;return r.b(n=n||""),r.b('<div class="demo-layout-transparent mdl-layout mdl-js-layout">\r'),r.b("\n"+n),r.b('  <header class="mdl-layout__header mdl-layout__header--transparent">\r'),r.b("\n"+n),r.b('    <div class="mdl-layout__header-row">\r'),r.b("\n"+n),r.b('      <i class="material-icons">directions_bike</i>\r'),r.b("\n"+n),r.b('      <span class="mdl-layout-title">Sky Bikes - Bike to the Sky !</span>\r'),r.b("\n"+n),r.b('      <i class="material-icons">cloud_queue</i>\r'),r.b("\n"+n),r.b('      <div class="mdl-layout-spacer"></div>\r'),r.b("\n"+n),r.b('      <nav class="mdl-navigation">\r'),r.b("\n"+n),r.b('      <a id="tabCustomer" href="">Customer</a>\r'),r.b("\n"+n),r.b('      <a id="tabMember" href="">Member</a>\r'),r.b("\n"+n),r.b('      <a id="tabSysAdmin" href="">SysAdmin</a>\r'),r.b("\n"+n),r.b("      </nav>\r"),r.b("\n"+n),r.b("    </div>\r"),r.b("\n"+n),r.b("  </header>\r"),r.b("\n"+n),r.b('  <main class="mdl-layout__content">\r'),r.b("\n"+n),r.b(r.rp("<view0",t,e,"    ")),r.b("  </main>\r"),r.b("\n"+n),r.b("</div>"),r.fl()},partials:{"<view0":{name:"view",partials:{},subs:{}}},subs:{}},'<div class="demo-layout-transparent mdl-layout mdl-js-layout">\r\n  <header class="mdl-layout__header mdl-layout__header--transparent">\r\n    <div class="mdl-layout__header-row">\r\n      <i class="material-icons">directions_bike</i>\r\n      <span class="mdl-layout-title">Sky Bikes - Bike to the Sky !</span>\r\n      <i class="material-icons">cloud_queue</i>\r\n      <div class="mdl-layout-spacer"></div>\r\n      <nav class="mdl-navigation">\r\n      <a id="tabCustomer" href="">Customer</a>\r\n      <a id="tabMember" href="">Member</a>\r\n      <a id="tabSysAdmin" href="">SysAdmin</a>\r\n      </nav>\r\n    </div>\r\n  </header>\r\n  <main class="mdl-layout__content">\r\n    {{> view}}\r\n  </main>\r\n</div>',r)},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),i=g(n(30)),a=g(n(27)),o=g(n(26)),s=g(n(25)),l=g(n(24)),d=g(n(23)),c=g(n(22)),u=n(21),b=n(20),f=g(n(19)),m=g(n(18)),p=n(5),h=n(4),v=n(15),y=n(6);function g(t){return t&&t.__esModule?t:{default:t}}n(14);var w=function(){function t(e){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.store=e,this.timers={},this.app=document.createElement("div"),this.app.className="App",document.body.appendChild(this.app)}return r(t,[{key:"bindDomElements",value:function(){var t=this;(0,v.bindOnclick)("#tabCustomer",function(){return t.render(a.default)}),(0,v.bindOnclick)("#tabMember",this.memberView.bind(this)),(0,v.bindOnclick)("#tabSysAdmin",this.sysAdminView.bind(this)),(0,v.bindOnSubmit)("#registrationForm",this.registerCustomer.bind(this)),(0,v.bindOnclick)("#memberLoginBtn",this.memberLogin.bind(this)),(0,v.bindOnclick)("#logout",this.memberLogout.bind(this)),(0,v.bindOnclickForClass)(".rent",this.rentBike.bind(this)),(0,v.bindOnclickForClass)(".return",this.returnBike.bind(this))}},{key:"memberView",value:function(){this.store.getState().auth.connectedMember?this.displayAppropriateScreenOnceLogged():this.render(o.default)}},{key:"sysAdminView",value:function(){var t=this.store.getState(),e=t.stations,n=t.members;this.render(s.default,{stations:(0,p.getAllStations)(e),members:(0,h.getAllMembers)(n)})}},{key:"registerCustomer",value:function(){var t=document.querySelector("#registrationForm"),e=t.fname,n=t.lname,r=t.email,i=t.phone;try{new f.default(r.value).checkCustomerInformation(e.value,n.value,i.value,(0,h.getAllMembers)(this.store.getState().members)),this.store.dispatch((0,b.signup)(e.value,n.value,r.value,i.value)),alert("Account created !"),t.reset()}catch(t){alert(t)}}},{key:"startTimer",value:function(t,e,n){var r=this,i=Date.now();this.timers[n]=e;var a=setInterval(function(){var t=Date.now()-i,o=y.MAX_TIME_RENTAL-t;e.innerHTML=o+" ms remaining to return the bike",t>y.MAX_TIME_RENTAL&&(r.store.dispatch((0,u.lateReturn)(n)),clearInterval(a),(0,h.getMemberInfo)(r.store.getState().members,r.store.getState().auth.connectedMember).banned&&r.render(c.default))},1)}},{key:"memberLogin",value:function(){try{var t=document.querySelector("#email").value;new f.default(t).checkLogin((0,h.getAllMembers)(this.store.getState().members)),this.store.dispatch((0,b.login)(t)),this.displayAppropriateScreenOnceLogged()}catch(t){alert(t)}}},{key:"displayAppropriateScreenOnceLogged",value:function(){var t=(0,p.getAllStations)(this.store.getState().stations),e=this.store.getState().auth.connectedMember;if((0,h.getMemberInfo)(this.store.getState().members,e).banned)this.render(c.default);else{var n=(0,h.isMemberABorrower)(this.store.getState().members,e)?d.default:l.default;this.render(n,{email:e,stations:t});var r=document.querySelector("#timer-countdown");r&&r.parentNode.replaceChild(this.timers[e],r)}}},{key:"memberLogout",value:function(){this.store.dispatch((0,b.logout)()),this.render(o.default)}},{key:"rentBike",value:function(t){try{var e=t.target.getAttribute("data-id"),n=this.store.getState().stations,r=this.store.getState().auth.connectedMember,i=(0,p.getStationById)(n,e);new m.default(i).checkStationForRentingBike(),this.store.dispatch((0,u.rentBike)(e,r));var a=(0,p.getAllStations)(n);this.render(d.default,{email:r,stations:a}),this.startTimer(y.MAX_TIME_RENTAL,document.querySelector("#timer-countdown"),r)}catch(t){alert(t)}}},{key:"returnBike",value:function(t){var e=t.target.getAttribute("data-id"),n=this.store.getState().stations,r=this.store.getState().auth.connectedMember;try{var i=(0,p.getStationById)(n,e);new m.default(i).checkStationForReturningBike(),this.store.dispatch((0,u.returnBike)(e,r));var a=(0,p.getAllStations)(n);this.render(l.default,{email:r,stations:a})}catch(t){alert(t)}}},{key:"render",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:a.default,e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};this.app.innerHTML=i.default.render(e,{view:t}),this.bindDomElements()}}]),t}();e.default=w},function(t,e,n){"use strict";var r,i=n(31),a=(r=i)&&r.__esModule?r:{default:r},o=n(2),s=n(9);var l=(0,o.createStore)(s.reducers,window.__REDUX_DEVTOOLS_EXTENSION__&&window.__REDUX_DEVTOOLS_EXTENSION__());new a.default(l).render()}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,